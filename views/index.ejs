<!DOCTYPE html>
<html>
  <head>
    <% include head.common.ejs %>

    <style>
        textarea 
        {
            resize: none;
        }
        body
        {
            margin-top: 20px;
        }
        #mapcanvas
        {
            height: 500px;
        }
    </style>

    <script type="text/javascript"
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDbtMHdwtaStpZ_TWDdJmWopkdInyWwyaQ&sensor=false">
    </script>
    <script>
        var map;
        var homeMarker;
        var markers = {};
        var $message;
        var defaultMapOptions = {
            center: new google.maps.LatLng(47, -122.5),
            zoom: 2,
            navigationControlOptions: { style: google.maps.NavigationControlStyle.SMALL },
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };

        var resolveLocationRequests;

        function resolveLocation(success, error) {
            var callback = function (kind) {
                return function (data) {
                    var tmp = resolveLocationRequests;
                    resolveLocationRequests = undefined;
                    for (var i in tmp) {
                        if (tmp[i][kind]) {
                            tmp[i][kind](data);
                        }
                    }
                }
            };

            if (!navigator.geolocation) {
                if (error) {
                    error('Geolocation services are not supported by your browser.');
                }
            }
            else {
                // ensure only one geolocation request is active at a time
                var request = { success: success, error: error };
                if (!resolveLocationRequests) {
                    resolveLocationRequests = [ request ];
                    navigator.geolocation.getCurrentPosition(callback('success'), callback('error'), { timeout: 15000 });   
                }
                else {
                    resolveLocationRequests.push(request);
                }
            }
        }

        function getPositionString(position) {
            return Math.round(position.coords.latitude * 10000) / 10000 + 
                    ',' + Math.round(position.coords.longitude * 10000) / 10000;    
        }

        function locateMe() {
            var success = function (position) {
                var mapPosition =  new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                if (!map) {
                    var options = {
                        center: mapPosition,
                        zoom: 10,
                        navigationControlOptions: { style: google.maps.NavigationControlStyle.SMALL },
                        mapTypeId: google.maps.MapTypeId.ROADMAP
                    };

                    showMap(options);
                }
                else {
                    map.setCenter(mapPosition);
                    map.setZoom(10);
                }

                if (homeMarker) {
                    homeMarker.setMap(null);
                    homeMarker = null;
                }

                homeMarker = new google.maps.Marker({
                    position: mapPosition,
                    map: map, 
                    title: 'Your location: ' + getPositionString(position),
                    icon: 'http://mapicons.nicolasmollet.com/wp-content/uploads/mapicons/shape-default/color-8f5a22/shapecolor-color/shadow-1/border-dark/symbolstyle-white/symbolshadowstyle-dark/gradient-no/regroup.png'
                });
            };

            var error = function (msg) {
                var message = 'Unable to determine current location.';
                if (typeof msg === 'object' && typeof msg.message === 'string')
                    message += ' ' + msg.message;

                if (homeMarker) {
                    homeMarker.setMap(null);
                    homeMarker = null;
                }
                                
                alert(message);
            };

            resolveLocation(success, error);
        }

        function showMap(options) {
            map = new google.maps.Map(document.getElementById("mapcanvas"), options);
        }

        function resolveHere(resolver, match, callback) {
            resolveLocation(function (position) {
                var location = getPositionString(position);
                callback(resolver, match, location)
            });
        }

        function resolveNow(resolver, match, callback) {
            callback(resolver, match, new Date().toISOString());
        }

        function updateMap() {
            // find all locations in message

            var coordsRegex = /\$\(([\+\-]?\d+\.?\d*),([\+\-]?\d+\.?\d*)[^)]*\)/g;
            var message = $message.val();
            var newMarkers = {};
            var match;
            while ((match = coordsRegex.exec(message)) !== null) {
                newMarkers[match[0]] = match;
            }

            // transfer existing markers, create new ones

            for (var i in newMarkers) {
                if (markers[i]) {
                    newMarkers[i] = markers[i];
                }
                else {
                    newMarkers[i] = new google.maps.Marker({
                        position: new google.maps.LatLng(newMarkers[i][1], newMarkers[i][2]),
                        map: map, 
                        title: i.substring(2, i.length - 1),
                        icon: 'http://mapicons.nicolasmollet.com/wp-content/uploads/mapicons/shape-default/color-f00c0c/shapecolor-color/shadow-1/border-dark/symbolstyle-white/symbolshadowstyle-dark/gradient-no/direction_down.png'
                        // icon: 'http://mapicons.nicolasmollet.com/wp-content/uploads/mapicons/shape-default/color-9d7050/shapecolor-color/shadow-1/border-dark/symbolstyle-white/symbolshadowstyle-dark/gradient-no/direction_down.png'

                        // icon: 'http://mapicons.nicolasmollet.com/wp-content/uploads/mapicons/shape-default/color-3875d7/shapecolor-color/shadow-1/border-dark/symbolstyle-white/symbolshadowstyle-dark/gradient-no/regroup.png'
                    });
                }
            }

            // delete removed markers

            for (var i in markers) {
                if (!newMarkers[i]) {
                    markers[i].setMap(null);
                }
            }

            markers = newMarkers;
        }

        var markupResolvers = [
            {
                regex: /\$here(\s)/i,
                handler: resolveHere,
                formatter: function (value, match) { return '$(' + value + ')' + match[1]; }
            },
            {
                regex: /\^now(\s)/i,
                handler: resolveNow,
                formatter: function (value, match) { return '^(' + value + ')' + match[1]; }
            }
        ];

        function processMarkup() {
            var message = $message.val();
            for (var i in markupResolvers) {
                var markupResolver = markupResolvers[i];
                var match = markupResolver.regex.exec(message);
                if (match) {
                    markupResolver.handler(markupResolver, match, function (markupResolver, match, replacement) {
                        var currentMessage = $message.val();
                        var selectionStart = $message.prop('selectionStart');
                        var selectionEnd = $message.prop('selectionEnd');
                        var i = currentMessage.indexOf(match[0]);
                        if (i >= 0) {
                            var newValue = markupResolver.formatter(replacement, match);
                            var newMessage = currentMessage.replace(match[0], newValue);
                            $message.val(newMessage);
                            if (selectionStart > (i + match[0].length)) {
                                $message.prop('selectionStart', selectionStart + newValue.length - match[0].length);
                            }
                            if (selectionEnd > (i + match[0].length)) {
                                $message.prop('selectionEnd', selectionEnd + newValue.length - match[0].length);
                            }

                            updateMap();
                        }
                    });
                }
            }

            updateMap();
        }

        $(function () {
            $message = $('#message');
            showMap(defaultMapOptions);
            $('#message').keyup(processMarkup);
            if (navigator.geolocation) {
                $('#locateMe').click(locateMe);
                locateMe();
            }
        });
    </script>
  </head>
  <body>
    <div id="help" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">Ã—</button>
            <h3 id="myModalLabel">Markup help</h3>
        </div>
        <div class="modal-body">
            <table class="table table-condensed">
                <tr>
                    <td>$here</td>
                    <td>your current location</td>
                </tr>
                <tr>
                    <td>$(48.2, -121.4)</td>
                    <td>48.2 N, 121.4 W (latitude,longitude)</td>
                </tr>
                <tr>
                    <td>$(Pike Place Market, Seattle, WA)</td>
                    <td>well: Pike Place Market, Seattle, WA</td>
                </tr>                
                <tr>
                    <td>^now</td>
                    <td>your current date and time</td>
                </tr>
                <tr>
                    <td>^today</td>
                    <td>current date (no time)</td>
                </tr>
                <tr>
                    <td>^tomorrow</td>
                    <td>tomorrow</td>
                </tr>
                <tr>
                    <td>^yesterday</td>
                    <td>you guessed it - yesterday</td>
                </tr>
                <tr>
                    <td>^6/8/2013</td>
                    <td>June 8th, 2013 (month/day/year)</td>
                </tr>
                <tr>
                    <td>^6/8/2013T14:20</td>
                    <td>June 8th, 2013, 2:20pm in your local time zone</td>
                </tr>
                <tr>
                    <td>^6/8/2013T14:20-9</td>
                    <td>June 8th, 2013, 2:20pm in GMT-9</td>
                </tr>
            </table>
        </div>
    </div>
    <div class="container">
        <div class="row">
            <div class="span8 offset2">
                <span class="lead"><strong>What, Where and When</strong></span>
                <a href="#help" role="button" data-toggle="modal">(help with markup)</a>
            </div>
        </div>
        <div class="row">
            <div class="span8 offset2">
                <textarea rows="3" id="message" placeholder="Text with #tags, @people, ^time, and $location" class="input-block-level"></textarea>
                <div class="btn-toolbar">
                    <div class="btn-group">
                        <a href="#" class="btn btn-primary">Search</a>
                        <a href="#" class="btn btn-info">Post</a>
                    </div>
                    <div class="form-search btn-group">
                        <input type="text" class="input-large search-query" placeholder="My current location">
                        <a href="#" class="btn" id="locateMe">Show</a>
                    </div>
                </div>
            </div>
        </div>
        <div class="row" >
            <div class="span8 offset2" id="mapcanvas">
            </div>
        </div>      
    </div>
  </body>
</html>